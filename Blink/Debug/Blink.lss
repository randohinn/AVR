
Blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000036e  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000005a0  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c47  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000015cb  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000020  00000000  00000000  00001618  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000061a  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005b6  00000000  00000000  00001c52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000007e  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000267  00000000  00000000  00002286  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	93 c1       	rjmp	.+806    	; 0x36a <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:
 */

#include <avr/io.h>
#include <util/delay.h>

int main() {
  46:	cf 93       	push	r28
  48:	df 93       	push	r29
  4a:	cd b7       	in	r28, 0x3d	; 61
  4c:	de b7       	in	r29, 0x3e	; 62
  4e:	2e 97       	sbiw	r28, 0x0e	; 14
  50:	0f b6       	in	r0, 0x3f	; 63
  52:	f8 94       	cli
  54:	de bf       	out	0x3e, r29	; 62
  56:	0f be       	out	0x3f, r0	; 63
  58:	cd bf       	out	0x3d, r28	; 61
	DDRB = (1 << DDB1);
  5a:	84 e2       	ldi	r24, 0x24	; 36
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	22 e0       	ldi	r18, 0x02	; 2
  60:	fc 01       	movw	r30, r24
  62:	20 83       	st	Z, r18
	while(1) {
		PORTB  ^= (1<<PINB1);
  64:	85 e2       	ldi	r24, 0x25	; 37
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	fc 01       	movw	r30, r24
  6a:	30 81       	ld	r19, Z
  6c:	85 e2       	ldi	r24, 0x25	; 37
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	22 e0       	ldi	r18, 0x02	; 2
  72:	23 27       	eor	r18, r19
  74:	fc 01       	movw	r30, r24
  76:	20 83       	st	Z, r18
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	aa e7       	ldi	r26, 0x7A	; 122
  7e:	b4 e4       	ldi	r27, 0x44	; 68
  80:	89 83       	std	Y+1, r24	; 0x01
  82:	9a 83       	std	Y+2, r25	; 0x02
  84:	ab 83       	std	Y+3, r26	; 0x03
  86:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	4a e7       	ldi	r20, 0x7A	; 122
  8e:	53 e4       	ldi	r21, 0x43	; 67
  90:	69 81       	ldd	r22, Y+1	; 0x01
  92:	7a 81       	ldd	r23, Y+2	; 0x02
  94:	8b 81       	ldd	r24, Y+3	; 0x03
  96:	9c 81       	ldd	r25, Y+4	; 0x04
  98:	dd d0       	rcall	.+442    	; 0x254 <__mulsf3>
  9a:	dc 01       	movw	r26, r24
  9c:	cb 01       	movw	r24, r22
  9e:	8d 83       	std	Y+5, r24	; 0x05
  a0:	9e 83       	std	Y+6, r25	; 0x06
  a2:	af 83       	std	Y+7, r26	; 0x07
  a4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	40 e8       	ldi	r20, 0x80	; 128
  ac:	5f e3       	ldi	r21, 0x3F	; 63
  ae:	6d 81       	ldd	r22, Y+5	; 0x05
  b0:	7e 81       	ldd	r23, Y+6	; 0x06
  b2:	8f 81       	ldd	r24, Y+7	; 0x07
  b4:	98 85       	ldd	r25, Y+8	; 0x08
  b6:	4d d0       	rcall	.+154    	; 0x152 <__cmpsf2>
  b8:	88 23       	and	r24, r24
  ba:	2c f4       	brge	.+10     	; 0xc6 <main+0x80>
		__ticks = 1;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	9a 87       	std	Y+10, r25	; 0x0a
  c2:	89 87       	std	Y+9, r24	; 0x09
  c4:	3b c0       	rjmp	.+118    	; 0x13c <main+0xf6>
	else if (__tmp > 65535)
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	3f ef       	ldi	r19, 0xFF	; 255
  ca:	4f e7       	ldi	r20, 0x7F	; 127
  cc:	57 e4       	ldi	r21, 0x47	; 71
  ce:	6d 81       	ldd	r22, Y+5	; 0x05
  d0:	7e 81       	ldd	r23, Y+6	; 0x06
  d2:	8f 81       	ldd	r24, Y+7	; 0x07
  d4:	98 85       	ldd	r25, Y+8	; 0x08
  d6:	ba d0       	rcall	.+372    	; 0x24c <__gesf2>
  d8:	18 16       	cp	r1, r24
  da:	3c f5       	brge	.+78     	; 0x12a <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	40 e2       	ldi	r20, 0x20	; 32
  e2:	51 e4       	ldi	r21, 0x41	; 65
  e4:	69 81       	ldd	r22, Y+1	; 0x01
  e6:	7a 81       	ldd	r23, Y+2	; 0x02
  e8:	8b 81       	ldd	r24, Y+3	; 0x03
  ea:	9c 81       	ldd	r25, Y+4	; 0x04
  ec:	b3 d0       	rcall	.+358    	; 0x254 <__mulsf3>
  ee:	dc 01       	movw	r26, r24
  f0:	cb 01       	movw	r24, r22
  f2:	bc 01       	movw	r22, r24
  f4:	cd 01       	movw	r24, r26
  f6:	31 d0       	rcall	.+98     	; 0x15a <__fixunssfsi>
  f8:	dc 01       	movw	r26, r24
  fa:	cb 01       	movw	r24, r22
  fc:	9a 87       	std	Y+10, r25	; 0x0a
  fe:	89 87       	std	Y+9, r24	; 0x09
 100:	0f c0       	rjmp	.+30     	; 0x120 <main+0xda>
 102:	89 e1       	ldi	r24, 0x19	; 25
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	9c 87       	std	Y+12, r25	; 0x0c
 108:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 10a:	8b 85       	ldd	r24, Y+11	; 0x0b
 10c:	9c 85       	ldd	r25, Y+12	; 0x0c
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0xc8>
 112:	9c 87       	std	Y+12, r25	; 0x0c
 114:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 116:	89 85       	ldd	r24, Y+9	; 0x09
 118:	9a 85       	ldd	r25, Y+10	; 0x0a
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	9a 87       	std	Y+10, r25	; 0x0a
 11e:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
 120:	89 85       	ldd	r24, Y+9	; 0x09
 122:	9a 85       	ldd	r25, Y+10	; 0x0a
 124:	89 2b       	or	r24, r25
 126:	69 f7       	brne	.-38     	; 0x102 <main+0xbc>
		}
		return;
 128:	13 c0       	rjmp	.+38     	; 0x150 <main+0x10a>
	}
	else
		__ticks = (uint16_t)__tmp;
 12a:	6d 81       	ldd	r22, Y+5	; 0x05
 12c:	7e 81       	ldd	r23, Y+6	; 0x06
 12e:	8f 81       	ldd	r24, Y+7	; 0x07
 130:	98 85       	ldd	r25, Y+8	; 0x08
 132:	13 d0       	rcall	.+38     	; 0x15a <__fixunssfsi>
 134:	dc 01       	movw	r26, r24
 136:	cb 01       	movw	r24, r22
 138:	9a 87       	std	Y+10, r25	; 0x0a
 13a:	89 87       	std	Y+9, r24	; 0x09
 13c:	89 85       	ldd	r24, Y+9	; 0x09
 13e:	9a 85       	ldd	r25, Y+10	; 0x0a
 140:	9e 87       	std	Y+14, r25	; 0x0e
 142:	8d 87       	std	Y+13, r24	; 0x0d
 144:	8d 85       	ldd	r24, Y+13	; 0x0d
 146:	9e 85       	ldd	r25, Y+14	; 0x0e
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0x102>
 14c:	9e 87       	std	Y+14, r25	; 0x0e
 14e:	8d 87       	std	Y+13, r24	; 0x0d
 150:	89 cf       	rjmp	.-238    	; 0x64 <main+0x1e>

00000152 <__cmpsf2>:
 152:	2f d0       	rcall	.+94     	; 0x1b2 <__fp_cmp>
 154:	08 f4       	brcc	.+2      	; 0x158 <__cmpsf2+0x6>
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	08 95       	ret

0000015a <__fixunssfsi>:
 15a:	57 d0       	rcall	.+174    	; 0x20a <__fp_splitA>
 15c:	88 f0       	brcs	.+34     	; 0x180 <__fixunssfsi+0x26>
 15e:	9f 57       	subi	r25, 0x7F	; 127
 160:	90 f0       	brcs	.+36     	; 0x186 <__fixunssfsi+0x2c>
 162:	b9 2f       	mov	r27, r25
 164:	99 27       	eor	r25, r25
 166:	b7 51       	subi	r27, 0x17	; 23
 168:	a0 f0       	brcs	.+40     	; 0x192 <__fixunssfsi+0x38>
 16a:	d1 f0       	breq	.+52     	; 0x1a0 <__fixunssfsi+0x46>
 16c:	66 0f       	add	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	88 1f       	adc	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	1a f0       	brmi	.+6      	; 0x17c <__fixunssfsi+0x22>
 176:	ba 95       	dec	r27
 178:	c9 f7       	brne	.-14     	; 0x16c <__fixunssfsi+0x12>
 17a:	12 c0       	rjmp	.+36     	; 0x1a0 <__fixunssfsi+0x46>
 17c:	b1 30       	cpi	r27, 0x01	; 1
 17e:	81 f0       	breq	.+32     	; 0x1a0 <__fixunssfsi+0x46>
 180:	5e d0       	rcall	.+188    	; 0x23e <__fp_zero>
 182:	b1 e0       	ldi	r27, 0x01	; 1
 184:	08 95       	ret
 186:	5b c0       	rjmp	.+182    	; 0x23e <__fp_zero>
 188:	67 2f       	mov	r22, r23
 18a:	78 2f       	mov	r23, r24
 18c:	88 27       	eor	r24, r24
 18e:	b8 5f       	subi	r27, 0xF8	; 248
 190:	39 f0       	breq	.+14     	; 0x1a0 <__fixunssfsi+0x46>
 192:	b9 3f       	cpi	r27, 0xF9	; 249
 194:	cc f3       	brlt	.-14     	; 0x188 <__fixunssfsi+0x2e>
 196:	86 95       	lsr	r24
 198:	77 95       	ror	r23
 19a:	67 95       	ror	r22
 19c:	b3 95       	inc	r27
 19e:	d9 f7       	brne	.-10     	; 0x196 <__fixunssfsi+0x3c>
 1a0:	3e f4       	brtc	.+14     	; 0x1b0 <__fixunssfsi+0x56>
 1a2:	90 95       	com	r25
 1a4:	80 95       	com	r24
 1a6:	70 95       	com	r23
 1a8:	61 95       	neg	r22
 1aa:	7f 4f       	sbci	r23, 0xFF	; 255
 1ac:	8f 4f       	sbci	r24, 0xFF	; 255
 1ae:	9f 4f       	sbci	r25, 0xFF	; 255
 1b0:	08 95       	ret

000001b2 <__fp_cmp>:
 1b2:	99 0f       	add	r25, r25
 1b4:	00 08       	sbc	r0, r0
 1b6:	55 0f       	add	r21, r21
 1b8:	aa 0b       	sbc	r26, r26
 1ba:	e0 e8       	ldi	r30, 0x80	; 128
 1bc:	fe ef       	ldi	r31, 0xFE	; 254
 1be:	16 16       	cp	r1, r22
 1c0:	17 06       	cpc	r1, r23
 1c2:	e8 07       	cpc	r30, r24
 1c4:	f9 07       	cpc	r31, r25
 1c6:	c0 f0       	brcs	.+48     	; 0x1f8 <__fp_cmp+0x46>
 1c8:	12 16       	cp	r1, r18
 1ca:	13 06       	cpc	r1, r19
 1cc:	e4 07       	cpc	r30, r20
 1ce:	f5 07       	cpc	r31, r21
 1d0:	98 f0       	brcs	.+38     	; 0x1f8 <__fp_cmp+0x46>
 1d2:	62 1b       	sub	r22, r18
 1d4:	73 0b       	sbc	r23, r19
 1d6:	84 0b       	sbc	r24, r20
 1d8:	95 0b       	sbc	r25, r21
 1da:	39 f4       	brne	.+14     	; 0x1ea <__fp_cmp+0x38>
 1dc:	0a 26       	eor	r0, r26
 1de:	61 f0       	breq	.+24     	; 0x1f8 <__fp_cmp+0x46>
 1e0:	23 2b       	or	r18, r19
 1e2:	24 2b       	or	r18, r20
 1e4:	25 2b       	or	r18, r21
 1e6:	21 f4       	brne	.+8      	; 0x1f0 <__fp_cmp+0x3e>
 1e8:	08 95       	ret
 1ea:	0a 26       	eor	r0, r26
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <__fp_cmp+0x3e>
 1ee:	a1 40       	sbci	r26, 0x01	; 1
 1f0:	a6 95       	lsr	r26
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	81 1d       	adc	r24, r1
 1f6:	81 1d       	adc	r24, r1
 1f8:	08 95       	ret

000001fa <__fp_split3>:
 1fa:	57 fd       	sbrc	r21, 7
 1fc:	90 58       	subi	r25, 0x80	; 128
 1fe:	44 0f       	add	r20, r20
 200:	55 1f       	adc	r21, r21
 202:	59 f0       	breq	.+22     	; 0x21a <__fp_splitA+0x10>
 204:	5f 3f       	cpi	r21, 0xFF	; 255
 206:	71 f0       	breq	.+28     	; 0x224 <__fp_splitA+0x1a>
 208:	47 95       	ror	r20

0000020a <__fp_splitA>:
 20a:	88 0f       	add	r24, r24
 20c:	97 fb       	bst	r25, 7
 20e:	99 1f       	adc	r25, r25
 210:	61 f0       	breq	.+24     	; 0x22a <__fp_splitA+0x20>
 212:	9f 3f       	cpi	r25, 0xFF	; 255
 214:	79 f0       	breq	.+30     	; 0x234 <__fp_splitA+0x2a>
 216:	87 95       	ror	r24
 218:	08 95       	ret
 21a:	12 16       	cp	r1, r18
 21c:	13 06       	cpc	r1, r19
 21e:	14 06       	cpc	r1, r20
 220:	55 1f       	adc	r21, r21
 222:	f2 cf       	rjmp	.-28     	; 0x208 <__fp_split3+0xe>
 224:	46 95       	lsr	r20
 226:	f1 df       	rcall	.-30     	; 0x20a <__fp_splitA>
 228:	08 c0       	rjmp	.+16     	; 0x23a <__fp_splitA+0x30>
 22a:	16 16       	cp	r1, r22
 22c:	17 06       	cpc	r1, r23
 22e:	18 06       	cpc	r1, r24
 230:	99 1f       	adc	r25, r25
 232:	f1 cf       	rjmp	.-30     	; 0x216 <__fp_splitA+0xc>
 234:	86 95       	lsr	r24
 236:	71 05       	cpc	r23, r1
 238:	61 05       	cpc	r22, r1
 23a:	08 94       	sec
 23c:	08 95       	ret

0000023e <__fp_zero>:
 23e:	e8 94       	clt

00000240 <__fp_szero>:
 240:	bb 27       	eor	r27, r27
 242:	66 27       	eor	r22, r22
 244:	77 27       	eor	r23, r23
 246:	cb 01       	movw	r24, r22
 248:	97 f9       	bld	r25, 7
 24a:	08 95       	ret

0000024c <__gesf2>:
 24c:	b2 df       	rcall	.-156    	; 0x1b2 <__fp_cmp>
 24e:	08 f4       	brcc	.+2      	; 0x252 <__gesf2+0x6>
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	08 95       	ret

00000254 <__mulsf3>:
 254:	0b d0       	rcall	.+22     	; 0x26c <__mulsf3x>
 256:	78 c0       	rjmp	.+240    	; 0x348 <__fp_round>
 258:	69 d0       	rcall	.+210    	; 0x32c <__fp_pscA>
 25a:	28 f0       	brcs	.+10     	; 0x266 <__mulsf3+0x12>
 25c:	6e d0       	rcall	.+220    	; 0x33a <__fp_pscB>
 25e:	18 f0       	brcs	.+6      	; 0x266 <__mulsf3+0x12>
 260:	95 23       	and	r25, r21
 262:	09 f0       	breq	.+2      	; 0x266 <__mulsf3+0x12>
 264:	5a c0       	rjmp	.+180    	; 0x31a <__fp_inf>
 266:	5f c0       	rjmp	.+190    	; 0x326 <__fp_nan>
 268:	11 24       	eor	r1, r1
 26a:	ea cf       	rjmp	.-44     	; 0x240 <__fp_szero>

0000026c <__mulsf3x>:
 26c:	c6 df       	rcall	.-116    	; 0x1fa <__fp_split3>
 26e:	a0 f3       	brcs	.-24     	; 0x258 <__mulsf3+0x4>

00000270 <__mulsf3_pse>:
 270:	95 9f       	mul	r25, r21
 272:	d1 f3       	breq	.-12     	; 0x268 <__mulsf3+0x14>
 274:	95 0f       	add	r25, r21
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	55 1f       	adc	r21, r21
 27a:	62 9f       	mul	r22, r18
 27c:	f0 01       	movw	r30, r0
 27e:	72 9f       	mul	r23, r18
 280:	bb 27       	eor	r27, r27
 282:	f0 0d       	add	r31, r0
 284:	b1 1d       	adc	r27, r1
 286:	63 9f       	mul	r22, r19
 288:	aa 27       	eor	r26, r26
 28a:	f0 0d       	add	r31, r0
 28c:	b1 1d       	adc	r27, r1
 28e:	aa 1f       	adc	r26, r26
 290:	64 9f       	mul	r22, r20
 292:	66 27       	eor	r22, r22
 294:	b0 0d       	add	r27, r0
 296:	a1 1d       	adc	r26, r1
 298:	66 1f       	adc	r22, r22
 29a:	82 9f       	mul	r24, r18
 29c:	22 27       	eor	r18, r18
 29e:	b0 0d       	add	r27, r0
 2a0:	a1 1d       	adc	r26, r1
 2a2:	62 1f       	adc	r22, r18
 2a4:	73 9f       	mul	r23, r19
 2a6:	b0 0d       	add	r27, r0
 2a8:	a1 1d       	adc	r26, r1
 2aa:	62 1f       	adc	r22, r18
 2ac:	83 9f       	mul	r24, r19
 2ae:	a0 0d       	add	r26, r0
 2b0:	61 1d       	adc	r22, r1
 2b2:	22 1f       	adc	r18, r18
 2b4:	74 9f       	mul	r23, r20
 2b6:	33 27       	eor	r19, r19
 2b8:	a0 0d       	add	r26, r0
 2ba:	61 1d       	adc	r22, r1
 2bc:	23 1f       	adc	r18, r19
 2be:	84 9f       	mul	r24, r20
 2c0:	60 0d       	add	r22, r0
 2c2:	21 1d       	adc	r18, r1
 2c4:	82 2f       	mov	r24, r18
 2c6:	76 2f       	mov	r23, r22
 2c8:	6a 2f       	mov	r22, r26
 2ca:	11 24       	eor	r1, r1
 2cc:	9f 57       	subi	r25, 0x7F	; 127
 2ce:	50 40       	sbci	r21, 0x00	; 0
 2d0:	8a f0       	brmi	.+34     	; 0x2f4 <__mulsf3_pse+0x84>
 2d2:	e1 f0       	breq	.+56     	; 0x30c <__stack+0xd>
 2d4:	88 23       	and	r24, r24
 2d6:	4a f0       	brmi	.+18     	; 0x2ea <__mulsf3_pse+0x7a>
 2d8:	ee 0f       	add	r30, r30
 2da:	ff 1f       	adc	r31, r31
 2dc:	bb 1f       	adc	r27, r27
 2de:	66 1f       	adc	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	88 1f       	adc	r24, r24
 2e4:	91 50       	subi	r25, 0x01	; 1
 2e6:	50 40       	sbci	r21, 0x00	; 0
 2e8:	a9 f7       	brne	.-22     	; 0x2d4 <__mulsf3_pse+0x64>
 2ea:	9e 3f       	cpi	r25, 0xFE	; 254
 2ec:	51 05       	cpc	r21, r1
 2ee:	70 f0       	brcs	.+28     	; 0x30c <__stack+0xd>
 2f0:	14 c0       	rjmp	.+40     	; 0x31a <__fp_inf>
 2f2:	a6 cf       	rjmp	.-180    	; 0x240 <__fp_szero>
 2f4:	5f 3f       	cpi	r21, 0xFF	; 255
 2f6:	ec f3       	brlt	.-6      	; 0x2f2 <__mulsf3_pse+0x82>
 2f8:	98 3e       	cpi	r25, 0xE8	; 232
 2fa:	dc f3       	brlt	.-10     	; 0x2f2 <__mulsf3_pse+0x82>
 2fc:	86 95       	lsr	r24
 2fe:	77 95       	ror	r23
 300:	67 95       	ror	r22
 302:	b7 95       	ror	r27
 304:	f7 95       	ror	r31
 306:	e7 95       	ror	r30
 308:	9f 5f       	subi	r25, 0xFF	; 255
 30a:	c1 f7       	brne	.-16     	; 0x2fc <__mulsf3_pse+0x8c>
 30c:	fe 2b       	or	r31, r30
 30e:	88 0f       	add	r24, r24
 310:	91 1d       	adc	r25, r1
 312:	96 95       	lsr	r25
 314:	87 95       	ror	r24
 316:	97 f9       	bld	r25, 7
 318:	08 95       	ret

0000031a <__fp_inf>:
 31a:	97 f9       	bld	r25, 7
 31c:	9f 67       	ori	r25, 0x7F	; 127
 31e:	80 e8       	ldi	r24, 0x80	; 128
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	08 95       	ret

00000326 <__fp_nan>:
 326:	9f ef       	ldi	r25, 0xFF	; 255
 328:	80 ec       	ldi	r24, 0xC0	; 192
 32a:	08 95       	ret

0000032c <__fp_pscA>:
 32c:	00 24       	eor	r0, r0
 32e:	0a 94       	dec	r0
 330:	16 16       	cp	r1, r22
 332:	17 06       	cpc	r1, r23
 334:	18 06       	cpc	r1, r24
 336:	09 06       	cpc	r0, r25
 338:	08 95       	ret

0000033a <__fp_pscB>:
 33a:	00 24       	eor	r0, r0
 33c:	0a 94       	dec	r0
 33e:	12 16       	cp	r1, r18
 340:	13 06       	cpc	r1, r19
 342:	14 06       	cpc	r1, r20
 344:	05 06       	cpc	r0, r21
 346:	08 95       	ret

00000348 <__fp_round>:
 348:	09 2e       	mov	r0, r25
 34a:	03 94       	inc	r0
 34c:	00 0c       	add	r0, r0
 34e:	11 f4       	brne	.+4      	; 0x354 <__fp_round+0xc>
 350:	88 23       	and	r24, r24
 352:	52 f0       	brmi	.+20     	; 0x368 <__fp_round+0x20>
 354:	bb 0f       	add	r27, r27
 356:	40 f4       	brcc	.+16     	; 0x368 <__fp_round+0x20>
 358:	bf 2b       	or	r27, r31
 35a:	11 f4       	brne	.+4      	; 0x360 <__fp_round+0x18>
 35c:	60 ff       	sbrs	r22, 0
 35e:	04 c0       	rjmp	.+8      	; 0x368 <__fp_round+0x20>
 360:	6f 5f       	subi	r22, 0xFF	; 255
 362:	7f 4f       	sbci	r23, 0xFF	; 255
 364:	8f 4f       	sbci	r24, 0xFF	; 255
 366:	9f 4f       	sbci	r25, 0xFF	; 255
 368:	08 95       	ret

0000036a <_exit>:
 36a:	f8 94       	cli

0000036c <__stop_program>:
 36c:	ff cf       	rjmp	.-2      	; 0x36c <__stop_program>
